---
source: borsh-schema-derive-internal/src/enum_schema.rs
expression: pretty_print_syn_str(&actual).unwrap()
---
impl<A, B> borsh::BorshSchema for Side<A, B>
where
    A: Display + Debug,
    B: Display + Debug,
    A: borsh::BorshSchema,
    B: borsh::BorshSchema,
{
    fn declaration() -> borsh::schema::Declaration {
        let params = borsh::__private::maybestd::vec![
            < A > ::declaration(), < B > ::declaration()
        ];
        format!(r#"{}<{}>"#, "Side", params.join(", "))
    }
    fn add_definitions_recursively(
        definitions: &mut borsh::__private::maybestd::collections::BTreeMap<
            borsh::schema::Declaration,
            borsh::schema::Definition,
        >,
    ) {
        #[allow(dead_code)]
        #[derive(borsh::BorshSchema)]
        struct SideLeft<A>(A);
        #[allow(dead_code)]
        #[derive(borsh::BorshSchema)]
        struct SideRight<B>(B);
        <SideLeft<A> as borsh::BorshSchema>::add_definitions_recursively(definitions);
        <SideRight<B> as borsh::BorshSchema>::add_definitions_recursively(definitions);
        let variants = borsh::__private::maybestd::vec![
            ("Left".to_string(), < SideLeft < A > > ::declaration()), ("Right"
            .to_string(), < SideRight < B > > ::declaration())
        ];
        let definition = borsh::schema::Definition::Enum {
            variants,
        };
        Self::add_definition(Self::declaration(), definition, definitions);
    }
}

